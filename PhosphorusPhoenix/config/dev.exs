import Config

# Configure your database
config :phos, Phos.Repo,
  username: System.get_env("PGUSERNAME") || "postgres",
  password: System.get_env("PGPASSWORD") || "root",
  hostname: System.get_env("PGDOMAIN") || "localhost", ## domain change to postgres for docker
  database: "phos_dev",
  show_sensitive_data_on_connection_error: true,
  pool_size: 10,
  types: Phos.PostgresTypes

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with esbuild to bundle .js and .css sources.
config :phos, PhosWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {0, 0, 0, 0}, port: System.get_env("PORT") || 4000], ## 0,0,0,0 to postgres for docker
  check_origin: false,
  code_reloader: true,
  debug_errors: true, # true for error message
  secret_key_base: "Kg0QgtaLpp2OQJIfeNPfCoiFsIyL3gTKA8KMUXaNyD0xYw5+wFlelPexSf1m9k8m",
  watchers: [
    # Start the esbuild watcher by calling Esbuild.install_and_run(:default, args)
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]},
    admin: {Tailwind, :install_and_run, [:admin, ~w(--watch)]},
    storybook_tailwind: {Tailwind, :install_and_run, [:storybook, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.
# Joken Signer Config
config :joken, menshenSB: [
   signer_alg: "HS256",
   key_octet: "BALA"
]
# Watch static and templates for browser reloading.
config :phos, PhosWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/phos_web/(utility|live|views|controllers|channels)/.*(ex)$",
      ~r"lib/phos_web/templates/.*(eex)$",
      ~r"lib/phos_web/(views|controllers)/api/.*(ex)$",
      ~r"storybook/.*(exs)$"
    ]
  ]

# Do not include metadata nor timestamps in development logs
config :logger, :console,
  level: :info,
 format: "[$level] $message\n"

# Log Filter for Development
config :logger,
  backends: [:console],
  compile_time_purge_matching: [
    [application: :sparrow]
  ]


 # config :logger,
 # truncate: :infinity,
 # translator_inspect_opts: [limit: :infinity]

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# MINIO Object Store API Domain
config :ex_aws, :s3,
  scheme: "http://",
  host: "localhost",
  port: 9000

config :ex_aws, :retries,
  max_attempts: 2,
  base_backoff_in_ms: 10,
  max_backoff_in_ms: 10_000

config :phos, Phos.External.HeimdallrClient,
  base_url: {System, :get_env, ["HEIMDALLR_ENDPOINT"]}

#config :link_preview, parsers: [LinkPreview.Parsers.Opengraph]
