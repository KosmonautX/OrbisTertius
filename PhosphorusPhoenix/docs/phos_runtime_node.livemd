# Phos Phoenix Runtime Node

## Root

```elixir
Ecto.Changeset.apply_action(
  Enum.map([%{"entity" => "banner"}], fn x -> Phos.Orbject.Structure.usermedia_changeset(x) end),
  :orbject_fetch
)
```

```elixir
alias Phos.Users
id = Phos.Users.get_user_by_fyr("BX1BxM9KkwdFmy2J4FNNkFxclpS2").id
user = Users.get_user!(id)

params = %{
  "private_profile" => %{
    "user_id" => id,
    "geolocation" => [%{"id" => "home", "geohash" => 7_534_130_938_142}]
  },
  "personal_orb" => %{
    "id" => Ecto.UUID.generate(),
    "active" => true,
    "locations" => [%{"id" => 623_212_828_750_938_111}, %{"id" => 623_212_828_750_970_879}]
  }
}

user

Phos.Users.User.territorial_changeset(user, params)
|> Phos.Repo.update()

# Phos.Users.update_user(user, %{"username" => "cool", "public_profile" => %{"bio" => "wow"}})
```

## recompile @ node

```elixir
defmodule R do
  def recompile() do
    Mix.Task.reenable("app.start")
    Mix.Task.reenable("compile")
    Mix.Task.reenable("compile.all")
    compilers = Mix.compilers()
    Enum.each(compilers, &Mix.Task.reenable("compile.#{&1}"))
    Mix.Task.run("compile.all")
  end
end

R.recompile()
```

<!-- livebook:{"branch_parent_index":0} -->

## External APIs

```elixir
token = "secret_iEEKNgkL0gE0Havl8c840X0rSrUXlQf5xrKEXDzRqxb"
database = "6651c1b694844da39faa51d019fe6baf"

# headers = [
#   Authorization: "Bearer #{token}",
#   "Content-Type": "application/json",
#   "Notion-Version": "2022-02-22"
# ]

today = DateTime.utc_now() |> DateTime.add(60 * 60 * 10) |> DateTime.to_date()

date_query = %{
  "filter" => %{
    "property" => "Posting date",
    "date" => %{
      "equals" => today
    }
  }
}

today_post = Phos.External.Notion.post!("/databases/" <> database <> "/query", date_query, [])
```

<!-- livebook:{"branch_parent_index":0} -->

## oRBs

```elixir
Phos.Action.get_orbs_by_geohashes([614_269_017_680_510_975])
|> PhosWeb.Util.Viewer.fresh_orb_stream_mapper()
```

<!-- livebook:{"branch_parent_index":0} -->

## Users

```elixir
user_id = List.first(Phos.Users.list_users()).id

{:ok, orb} =
  Phos.Action.create_orb_and_publish(%{
    "id" => Ecto.UUID.generate(),
    "active" => true,
    "extinguish" => ~N[2022-05-20 12:12:00],
    "media" => true,
    "title" => "weird",
    "initiator_id" => user_id,
    "geolocation" => [623_276_216_929_910_783],
    "payload" => %{"where" => "here"}
  })

orb
```
