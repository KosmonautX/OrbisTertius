# -*- restclient -*-
# Phos API Endpoint Documentation

:ipAddress = http://localhost:4000/api
#:ipAddress = https://nyx.scrb.ac/api
:localipAddress = http://localhost:4000/api
:princeton=0b3gd5XUGtNP6lqQean4IAp7ogG3
:satrio=BX1BxM9KkwdFmy2J4FNNkFxclpS2
:princeton_id=10db31d9-e231-4a69-b1f0-60f495184540
:satrio_id=b2f8be78-cf09-4ddb-aa67-1856425c75cf
:lky=08c21b36-c3ca-4693-8dd3-085da8e81967
:auth-headers = <<
Authorization: :token
Content-Type: application/json
User-Agent: Emacs27
##
##
:headers = <<
Content-Type: application/json
User-Agent: Emacs27
##
## Generate Client-side JWT
GET :localipAddress/devland/flameon?user=:lky
-> run-hook (restclient-set-var ":token" (cdr (assq 'payload (json-read))))

## Generate Google Identity idToken for Firebase Auth
GET :localipAddress/devland/lankaonfyr?fyr_id=:satrio
-> run-hook (restclient-set-var ":fyr_token" (cdr (assq 'payload (json-read))))


## ! Userland Calls
## Translate Firebase Token to Client-side JWT
GET :ipAddress/userland/auth/fyr?fyr=:fyr_token
-> run-hook (restclient-set-var ":token" (cdr (assq 'payload (json-read))))
:headers
## Genesis (Create User// Returning User // Migrating User)
POST :ipAddress/userland/auth/fyr/genesis
-> run-hook (restclient-set-var ":token" (cdr (assq 'payload (json-read))))
:headers
{
    "fyr": ":fyr_token"
}

## Read userdata of self
GET :ipAddress/userland/self/
:auth-headers

## Update userdata of self
PUT :ipAddress/userland/self/
:auth-headers
{
    "bio": "alberto robotos",
    "username": "sokka",
    "public_name": "Albert the Robot",
    "birthday": 16123442423,
    "media": [
        {
            "essence": "banner",
            "resolution": "lossless"
        },
        {
            "essence": "profile",
            "resolution": "lossy"
        }
    ],
    "traits": [
        "aikido",
        "matrix"
    ],
    "occupation": "bloatwarengingeer"
}
## Read userdata of Others Profile
GET :ipAddress/userland/others/:satrio_id
:auth-headers
## Read all of User Orb History
GET :ipAddress/userland/others/:satrio_id/history?page=1
:auth-headers

## Update territorial data of self
PUT :ipAddress/userland/self/territory
:auth-headers
{
    "territory": [
        {
            "id": "home",
            "geohash": 627843393045598207,
            "location_description": "Pending road"
        },
        {
            "id": "work",
            "geohash": 627843377464406015
        }
    ]
}

## ! Folkland Calls
## View others Profile

## List all current Buddies
GET :ipAddress/folkland/friends
:auth-headers

## Orb Stream directed at yourself from friends
GET :ipAddress/folkland/stream/self?page=2
:auth-headers

## Orb Stream directed at yourself from friends
GET :ipAddress/folkland/stream/discovery?page=2
:auth-headers

## Send connection request
POST :ipAddress/folkland/friends
:auth-headers
{
    "friend_id": :princeton_id
}

## Ended the friendship
PUT :ipAddress/folkland/friends/ended
:auth-headers
{
    "friend_id": :princeton_id
}

## Began the friendship
PUT :ipAddress/folkland/friends/begun
:auth-headers
{
    "friend_id": ":lky"
}

## List of requests to you
GET :ipAddress/folkland/friends/requests
:auth-headers

## List of requests from you
GET :ipAddress/folkland/friends/pending
:auth-headers


### ! Orbland Calls
## Read Orb
GET :ipAddress/orbland/orbs/9ab5d83a-1142-4bc3-a4e8-61d68af34e4f
:auth-headers

## Read all orbs in that geohash id
GET :ipAddress/orbland/stream/623276216935972863
:auth-headers

## Create Orbs
POST :ipAddress/orbland/orbs
-> run-hook (restclient-set-var ":orb" (cdr (assq 'orb_uuid (assq 'data (json-read)))))
:auth-headers
{
    "geolocation": {
        "central_geohash": 623276216935972863
    },
    "title": "aikido style",
    "inner_title": "xcape the matrix",
    "info": "ba sing se",
    "active": "true",
    "media": [
        {
            "essence": "banner",
            "resolution": "lossless"
        }],
    "expires_in": "10000",
    "traits": ["holy", "mooncakes"]
}
## Update Orbs (Deactivate etc)
PUT :ipAddress/orbland/orbs/b2f8be78-cf09-4ddb-aa67-1856425c75cf
-> run-hook (restclient-set-var ":orb" (cdr (assq 'orb_uuid (assq 'data (json-read)))))
:auth-headers
{
    "geolocation": {
        "central_geohash": 623276216935972863
    },
    "title": "aikido style",
    "inner_title": "xcape the matrix",
    "info": "ba sing se",
    "active": "true",
    "media": [
        {
            "essence": "banner",
            "resolution": "lossless"
        }],
    "expires_in": "10000",
    "traits": ["holy", "mooncakes"]
}


### ! Comments API
## List Comments
GET :ipAddress/orbland/comments/
:auth-headers

## Read Comment
GET :ipAddress/orbland/comments/:commie
:auth-headers

## Reply to Orb (Create Root Comment)
POST :ipAddress/orbland/comments/
-> run-hook (restclient-set-var ":commie" (cdr (assq 'id (assq 'data (json-read)))))
:auth-headers
{
    "orb_id": ":orb",
    "body": "alberto robotos"
}

## Reply to Comment (Create Child Comment)
POST :ipAddress/orbland/comments/
:auth-headers
-> run-hook (restclient-set-var ":childcommie" (cdr (assq 'id (assq 'data (json-read)))))
{
    "parent_id": ":commie",
    "body": "I Have a secret comment"
}

## Create DEEP children Comment
POST :ipAddress/orbland/comments/
:auth-headers
-> run-hook (restclient-set-var ":childcommie" (cdr (assq 'id (assq 'data (json-read)))))
{
    "parent_id": ":childcommie",
    "body": "I Have a secret comment"
}

## Show Root Comments for ORB
GET :ipAddress/orbland/comments/root/:orb?page=1
:auth-headers

## Show Ancestors Comment
GET :ipAddress/orbland/comments/:orb/ancestor/:commie
:auth-headers

## Show Childrens Comment
GET :ipAddress/orbland/comments/children/:commie?page=1
:auth-headers
## Delete Comment
DELETE :ipAddress/orbland/comments/4f0e37a2-abab-46e8-aeb1-d4520255bf21
:auth-headers
