# -*- restclient -*-
# Phos API Endpoint Documentation

:ipAddress = http://localhost:4000/api
#:ipAddress = https://nyx.scrb.ac/api
:localipAddress = http://localhost:4000/api
:princeton=0b3gd5XUGtNP6lqQean4IAp7ogG3
:fyr_user=BX1BxM9KkwdFmy2J4FNNkFxclpS2
:lky=58fd1656-495e-4ab0-bd12-425aa31791c7
:auth-headers = <<
Authorization: :token
Content-Type: application/json
User-Agent: Emacs27
##
##
:headers = <<
Content-Type: application/json
User-Agent: Emacs27
##
## Generate Client-side JWT
GET :localipAddress/devland/flameon?user=random
-> run-hook (restclient-set-var ":token" (cdr (assq 'payload (json-read))))

## Generate Google Identity idToken for Firebase Auth
GET :localipAddress/devland/lankaonfyr?fyr_id=:princeton
-> run-hook (restclient-set-var ":fyr_token" (cdr (assq 'payload (json-read))))


## ! Userland Calls
## Translate Firebase Token to Client-side JWT
GET :ipAddress/userland/auth/fyr?fyr=:fyr_token
-> run-hook (restclient-set-var ":token" (cdr (assq 'payload (json-read))))
:headers
## Genesis (Create User// Returning User // Migrating User)
POST :ipAddress/userland/auth/fyr/genesis
-> run-hook (restclient-set-var ":token" (cdr (assq 'payload (json-read))))
:headers
{
    "fyr": ":fyr_token"
}
## Read userdata of self
GET :ipAddress/userland/self/
:auth-headers
## Update userdata of self
PUT :ipAddress/userland/self/
:auth-headers
{
    "bio": "alberto robotos",
    "username": "aang",
    "public_name": "Albert the Robot",
    "birthday": 16123442423,
    "media": [
        {
            "essence": "banner",
            "resolution": "lossless"
        },
        {
            "essence": "profile",
            "resolution": "lossy"
        }
    ],
    "traits": [
        "jesus",
        "nodejs"
    ],
    "occupation": "bloatwarengingeer"
}
## Update territorial data of self
PUT :ipAddress/userland/self/territory
:auth-headers
{
    "territory": [
        {
            "id": "home",
            "geohash": 627843393045598207,
            "location_description": "ba sing se"
        },
        {
            "id": "work",
            "geohash": 627843155476234239
        }
    ]
}

### ! ORBs API
## Read Orb
GET :ipAddress/orbland/orbs/9ab5d83a-1142-4bc3-a4e8-61d68af34e4f
:auth-headers
## Read all orbs (Paginated Call incoming)
GET :ipAddress/orbland/orbs
:auth-headers
## Create Orbs
POST :ipAddress/orbland/orbs
-> run-hook (restclient-set-var ":orb" (cdr (assq 'orb_uuid (assq 'data (json-read)))))
:auth-headers
{
    "geohash": {
        "target": 8,
        "central_geohash": 623275816647884799
    },
    "title": "yoga fire",
    "active": "true",
    "media": "false",
    "expires_in": "10000"
}


### ! Comments API
## List Comments
GET :ipAddress/orbland/comments/
:auth-headers

## Read Comment
GET :ipAddress/orbland/comments/:commie
:auth-headers

## Reply to Orb (Create Root Comment)
POST :ipAddress/orbland/comments/
-> run-hook (restclient-set-var ":commie" (cdr (assq 'id (assq 'data (json-read)))))
:auth-headers
{
    "orb_id": ":orb",
    "body": "alberto robotos"
}

## Reply to Comment (Create Child Comment)
POST :ipAddress/orbland/comments/
:auth-headers
-> run-hook (restclient-set-var ":childcommie" (cdr (assq 'id (assq 'data (json-read)))))
{
    "parent_id": ":commie",
    "body": "I Have a secret comment"
}

## Create DEEP children Comment
POST :ipAddress/orbland/comments/
:auth-headers
-> run-hook (restclient-set-var ":childcommie" (cdr (assq 'id (assq 'data (json-read)))))
{
    "parent_id": ":childcommie",
    "body": "I Have a secret comment"
}

## Show Root Comments for ORB
GET :ipAddress/orbland/comments/root/:orb?page=1
:auth-headers

## Show Ancestors Comment
GET :ipAddress/orbland/comments/:orb/ancestor/:commie
:auth-headers

## Show Childrens Comment
GET :ipAddress/orbland/comments/children/:commie?page=1
:auth-headers
## Delete Comment
DELETE :ipAddress/orbland/comments/4f0e37a2-abab-46e8-aeb1-d4520255bf21
:auth-headers
