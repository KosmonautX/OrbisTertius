# -*- restclient -*-
#
# ScratchbacV4.7 (local env)
#
:localipAddress = http://localhost:5000
:ipAddress = http://localhost:5000
#:ipAddress = https://norbandy.scratchbac.org
#:ipAddress = https://borbarossa.scratchbac.org
:id = 01234567-89ABCDEF-01234567-89ABCDEF
:googleAuth = <<
Authorization: :fyrtoken
Content-Type: application/json
User-Agent: Emacs27
##
:evange = 188681901
:bala = 98667304
:web = https://norbandy.scratchbac.org
#:ryan = scratchbacAdmin
:jerry = w8IaWCHPjfRMhCeTXAnH7OCvQOo2
:ryan = R3Vsjq9CARfprwOJps44kbVczFQ2
:prince = MQTT323
:admin = DAAohgsLMpQPmsbpbvgQ5PEPuy22
:applefcm = cTMyiUFzTkSv0TUOgdgSUO:APA91bEWKbHlTe285TNkjMy2QMXnuBaHdHK_QUbevRNEgOz7cmzhXN4GTO7xaFKoScq5Mq9rpZVf2i0OWzF8SFqXm6nIFnwPPbRJf6DMpcYt_5Pw4C4zftRjRZ4bfRLROXYfW_VjivaF
:printonemail = "niceprinceton@gmail.com"
:ryanemail = luckuveryx@gmail.com
:myemail = avivekbala@gmail.com
:my-headers = <<
Authorization: :token
Content-Type: application/json
User-Agent: Emacs27
###
:no-auth-headers = <<
Content-Type: application/json
User-Agent: Emacs27
###
:boni-headers = <<
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiUjNWc2pxOUNBUmZwcndPSnBzNDRrYlZjekZRMiIsInJvbGUiOiJib25pIiwiaWF0IjoxNjQ3MDc0MzQ4LCJleHAiOjE2NDcwNzU1NDgsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ.dKBSHVsMdEiACtkb4WUk8TCRvJC-Ilux8B_T4-4-Sw8
Content-Type: application/json
User-Agent: Emacs27
###
### Generate Client-side like firetoken
GET :localipAddress/api/dev/fyr?id=:ryan
-> run-hook (restclient-set-var ":fyrtoken" (cdr (assq 'payload (json-read))))
###
### Generate Client-side like firetoken
GET :localipAddress/api/dev/fyr?id=:jerry
-> run-hook (restclient-set-var ":fyrtoken" (cdr (assq 'payload (json-read))))
###
## Initialise user
GET :ipAddress/api/devland/fyr/flameon?device_id=:id
:googleAuth
##
#
POST :ipAddress/api/devland/fyr/serveronfyr
-> run-hook (restclient-set-var ":token" (cdr (assq 'payload (json-read))))
:googleAuth

{
    "user_id": ":ryan",
    "device_id": ":id"
}
#
#
##
#
POST :ipAddress/api/dev/phoneonfyrs
:googleAuth

{
    "user_id": ":admin",
    "provider_id": "google.com",
    "phone": "+6591111111"
}
#
## BONI TOKEN
GET :localipAddress/api/dev/lankaonfyr
-> run-hook (restclient-set-var ":token" (cdr (assq 'payload (json-read))))
#
#
##
## POST ORB
POST :ipAddress/api/nomadology/post_orb
:my-headers
-> run-hook (restclient-set-var ":orb" (cdr (assq 'orb_uuid (json-read))))
{
    "user_id": ":ryan",
    "title": "finder of lost children",
    "info": "blessed is he",
    "where": "my brothers keeper",
    "when": "now",
    "tip": "foc",
    "media": false,
    "geolocation": {"live": {"latlon":{
    "lat":1.3568,
    "lon":103.7487
    },"target":9,"geolock": true}},
    "orb_nature": 1,
    "expires_in": 10000,
    "beacon": "samplebeacon"
}
#
##
### POST ORB
GET :ipAddress/api/tele/decode_geohash?hash=3857146046453&radius=42
:my-headers
#
## FRESH ORB FETCH
POST :ipAddress/api/nomadology/freshorbstream
:my-headers
{
    "user_id": ":ryan",
    "geolocation": {"live": {"latlon":{
    "lat":1.3568,
    "lon":103.7487
    },"target":10}},
    "upstream": 1640259800
}
#
##
## FCM Token Generator
PUT :ipAddress/api/orb/tokenonfyr
:my-headers
{
    "user_id": ":ryan",
    "token": ":applefcm"
}

#
## USER BIRTHDAY
PUT :ipAddress/api/orb/updatestate_user
:my-headers
{
    "user_id": ":ryan",
    "bio": "hello there",
    "media": false,
    "birthday": "2022-03-18 00:00:00.000Z"
}

#
## 2. Update user home&office POSTAL // lambda authoriser
PUT :ipAddress/api/orb/user_location
:my-headers
{
    "user_id": ":ryan",
    "event": "update",
    "live": {"latlon":{
    "lat":1.3568,
    "lon":103.7487
    }}
}
##
#
###
###
POST :ipAddress/api/orb/accept
:my-headers
{
    "user_id": ":ryan",
    "orb_uuid": ":orb",
    "beacon": ":applefcm"
}
##
##
#ACPT_PND//INIT_PND (PENDING)// INIT_COMPLETE//ACPT_COMPLETE
PUT :ipAddress/api/orbland/action/will
:my-headers

{
    "user_id": ":ryan",
    "actor_id": ":ryan",
    "orb_uuid": ":orb",
    "action": "ACPT_PND"
}
##

## 2. UPDATE USERNAME
PUT :ipAddress/api/orb/update_username
:my-headers
{
    "user_id": ":ryan",
    "username": "ScratchbacGM"
}

### POST ORB BONI
#
POST :ipAddress/api/tele/post_orb
:my-headers
-> run-hook (restclient-set-var ":orb" (cdr (assq 'orb_uuid (json-read))))
[{
"user_id": ":jerry",
"username": "Scratchbac Admin",
"title": "Final Post Nearby",
"geolocation": {"live": {"geohashes": ["896520ca08fffff", "886526aca3fffff", "886526ad95fffff", "886526aca5fffff"],"target":8,"geolock": true}},
"orb_nature": "10",
"expires_in": 10
}]
#
## LOCAL offline auth_server when no internet add SK #pte and identifier keys
POST :ipAddress/api/devland/auth/server
-> run-hook (restclient-set-var ":token" (cdr (assq 'payload (json-read))))
Content-Type: application/json

{
    "user_id": ":ryan",
    "device_id": ":id"
}

## 2. Get all fresh orbs
GET :ipAddress/api/query/orbs_in_loc_fresh_batch?postal=650301
:my-headers
## FOR USER GENSIS PIPELINE
#
## PHONE NUMBERS
POST :ipAddress/api/devland/auth/message
Content-Type: application/json

{
    "number": :printon,
    "code": "+65"
}
#

#
## Generate ORB UUID & Media assets
POST :ipAddress/api/orb/gen_uuid
:my-headers
{   
   "user_id": ":ryan",
   "media": true
}
#
## 1. Register user
# user id = telegram id </br>
# username: string</br>
# bio: string</br>
# profile pic </br>
# verified: 1 | 0</br>
# postal code: integer </br>
# country code: integer (dont have the +) </br>
# hp number: integer</br>
# gender: string</br>
# birthday : string
POST :ipAddress/api/orb/create_user
:my-headers
{
    "user_id": 188681901,
    "username": "evange",
    "bio": "Hi I'm new to Scratchbac!",
    "profile_pic": "assets/scratchbac_friends/scratchy4x.png",
    "home": 457399,
    "office": 487372
}


## 2. Accept ORB
# keyword: ACCEPT | BOOKMARK | DELETE | HIDE | REPORT</br>
# allows for latlon instead of postal code </br>
# To use latlon: </br> 
# "latlon": { </br> 
# &nbsp;&nbsp;  "LATITUDE": </br> 
# &nbsp;&nbsp;    "LONGITUDE": </br> 
# }</br>
# user id:</br>


## 3. user personal interaction with ORB
# action: save | hide
POST :ipAddress/api/orb/user_action
{
    "user_id": 1236,
    "orb_uuid": "1",
    "action": "save"
}

## 3. Undo user personal interaction with ORB
POST :ipAddress/api/orb/undo_user_action
{
    "user_id": 1234,
    "orb_uuid": "1",
    "action": "save"
}

## 4. Report ORB
POST :ipAddress/api/orb/report
:my-headers
{
    "orb_uuid": ":orb",
    "user_id": ":ryan",
    "reason": "qweoqoiweoqwieoqw"
}

## 5. chat with user (through tele)
# - username (optional)
# - title (optional)
POST :ipAddress/api/orb/chatWithTelegram
:my-headers
{
    "user_id": :bala,
    "init_id": :prince,
    "username": "ppman3",
    "title": "giving away some dogs"
}

## 1. fetch orb
GET :ipAddress/api/query/get?orb_uuid=c04615d4-7dad-4438-bd4f-da57b0f605bf
:my-headers
## 1. fetch orbs
GET :ipAddress/api/query/orbs/c04615d4-7dad-4438-bd4f-da57b0f605bf,79696fdc-a605-4d02-b5e9-bb7468517e4c
:my-headers
##

## 1. fetch users
GET :ipAddress/api/query/get_orbs/:orb
:my-headers

## 1. version check
GET :ipAddress/api/version/1.0.0
:no-auth-headers
## 2. FRESHORBS
GET :ipAddress/api/query/orbs_in_loc_fresh_batch?postal_code=650301
:my-headers
## 2. Get all fresh orbs PAGE
GET :ipAddress/api/query/orbs_in_loc_fresh_page?postal_code=457399&page=0

## 3. Get user's ORB profile
# fulfilled: acceptor fulfills another person's orb </br>
# completed: initiator completes his own orb
GET :ipAddress/api/query/user_profile?user_id=:ryan&keyword=init&starttime=1647609122&startkey=63a55760-6872-4bc9-a46d-64d42ded69ec
:my-headers
## 4. Retrieve user
GET :ipAddress/api/query/get_users/:ryan
:my-headers

## 4b. Check username
GET :ipAddress/api/query/check_username?username=evange
:my-headers

## 5. Get ORB acceptance
GET :ipAddress/api/query/orb_acceptance?orb_uuid=300c8c13-4da3-4ae8-9a26-d69f3f09aea2

## 6. Get user preferences ORB
# actions: rprt | hide | save
GET :ipAddress/api/query/user_pref?user_id=1236&action=save

## 7.buddies or baddies or conmate
GET :ipAddress/api/query/buddy?user_id=:ryan&relation=BUL
:my-headers

## get media of entities
GET https://orbis.scratchbac.org/api/query/user/get_media?entity=ORB&uuid=5b746de0-ec1a-479c-93c6-47f9970191a7&form=1920x1080
Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMTg4NDUyMTk2Iiwicm9sZSI6Im5vcm1hbCIsImlhdCI6MTYxNTU0NDQ0NSwiZXhwIjoxNjE1NTQ1NjQ1LCJpc3MiOiJQcmluY2V0b24iLCJzdWIiOiJTY3JhdGNoQmFjIn0.opcmt4J6mJqHzs2hXV6zFJrD9yol4fGpVCwiSF5UCgc
##
#

## 8. Check Postal
:my-headers
GET :ipAddress/api/query/postal_check?code=65992

## INIT ORB completion handshake
# for a user to complete his orb (mark his orb as Fulfilled) </br>
# put all the info to create the orb again </br>
#     "user_id": </br>
#     "orb_uuid": </br>
#     "username": </br>
#     "title": string</br>
#     "info": string</br>
#     "where": string</br>
#     "when": string</br>
#     "tip": string</br>
#     "tags": array of string</br>
#     "photo": </br>
#     "nature": int</br>
#     "postal_code": int</br>
#     "expires_in": "1 day" | "3 day" | "1 week" | "1 month" </br>
#     "expiry_dt": int</br>
#     "geohash": int</br>
#     "geohash52": int</br>
PUT :ipAddress/api/orb/complete_orb
:my-headers
{   
    "user_id": ":ryan",
    "orb_uuid": ":orb"
}


## 3. Complete ORB (for initiator)
# for a user to complete his orb (mark his orb as Fulfilled) </br>
# put all the info to create the orb again </br>
#     "user_id": </br>
#     "orb_uuid": </br>
#     "username": </br>
#     "title": string</br>
#     "info": string</br>
#     "where": string</br>
#     "when": string</br>
#     "tip": string</br>
#     "tags": array of string</br>
#     "photo": </br>
#     "nature": int</br>
#     "postal_code": int</br>
#     "expires_in": "1 day" | "3 day" | "1 week" | "1 month" </br>
#     "expiry_dt": int</br>
#     "geohash": int</br>
#     "geohash52": int</br>
PUT :ipAddress/api/orb/complete_orb
{   
    "user_id": 1234,
    "orb_uuid": "05f86450-c21e-411d-92f1-5017bd33afe3"
}

## 4. Complete ORB (for acceptor)
PUT :ipAddress/api/orb/complete_orb_acceptor
{   
    "user_id": 1234,
    "orb_uuid": "05f86450-c21e-411d-92f1-5017bd33afe3"
}

## 4. Complete ORB (for acceptor)
PUT :ipAddress/api/orb/complete_orb_dictator
{
    "user_id": 1234,
    "acpt_id":,
    "orb_uuid": "05f86450-c21e-411d-92f1-5017bd33afe3"
}

## 5. Delete acceptance interaction
PUT :ipAddress/api/orb/delete_acceptance
{   
    "user_id": 1236,
    "orb_uuid": "05f86450-c21e-411d-92f1-5017bd33afe3"
}

## 6. Deactivate ORB
PUT :ipAddress/api/orb/deactivate_orb
:my-headers
{   
    "user_id": ":ryan",
    "orb_uuid": ":orb"
}

## 7. Destroy ORB
PUT :ipAddress/api/orb/destroy_orb
:my-headers
{
    "user_id": ":ryan",
    "orb_uuid": ":orb"
}

## Anon da ORB
PUT :ipAddress/api/tele/destroy_orb
:my-headers
{
    "user_id": ":ryan",
    "orb_uuid": ":orb"
}

## ORB achieves nirvana
PUT :ipAddress/api/tele/nirvana_orb
:my-headers
{
    "orbs": ["6b9075a0-0851-4206-b90b-9167e5386064", "bed723a0-1872-42b9-bfd6-43d6a813c99c"]
}
#
##
POST :web/api/tele/post_orb
:my-headers
-> run-hook (restclient-set-var ":orb" (cdr (assq 'orb_uuid (json-read))))
{
    "user_id": ":ryan",
    "title": "finder of lost children",
    "info": "blessed is he",
    "where": "my house",
    "when": "now",
    "tip": "foc",
    "media": false,
    "geolocation": {"live": {"latlon":{
    "lat":1.3568,
    "lon":103.7487
    },"target":42,"geolock": true}},
    "orb_nature": 10,
    "expires_in": 10000,
    "beacon": "samplebeacon"
}

## 7a. Not interested (initiator)
PUT :ipAddress/api/orb/not_interested
{   
    "user_id": 1236,
    "orb_uuid": "05f86450-c21e-411d-92f1-5017bd33afe3",
    "acceptor_id": 1234 
}

## 7b. Not interested (acceptor)
PUT :ipAddress/api/orb/not_interested_acceptor
{   
    "user_id": 1234,
    "orb_uuid": "903dab61-9cde-46c4-960e-078fd22fee8a"
}
##
GET :ipAddress/api/query/buddy?user_id=:ryan&relation=BUL
:my-headers
##
#
## comments
### check comment
# check if an orb has commentsG
GET http://localhost:5000/api/comment/check?orb_uuid=:orb
:my-headers
### query comment
# check if a comment has children
GET http://localhost:5000/api/comment/query?comment_id=f71a1bf2-2897-4134-8fb7-91635d4b81d6
:my-headers
### get comment
# get a specific comment. </br>
# If the comment is a parent comment, then both parent_id and comment_id shall be the same. </br>
# If comment is a child comment, then parent_id of the parent comment is required.
GET localhost:5000/api/comment/query?parent_id=43dac5db-a38c-4557-8c0d-6e9df27a90ea&comment_id=
### post commenteyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkF0dGlsYUh1biIsInJvbGUiOiJiYXJiIiwiaWF0IjoxNjIwNzkxMjAwLCJleHAiOjE2MjA3OTI0MDAsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ._CpkWJ5S4GaEz3IrcmwoGSPkSL2jyEsVCdUsmdWYED4eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkF0dGlsYUh1biIsInJvbGUiOiJiYXJiIiwiaWF0IjoxNjIwNzkxMjAwLCJleHAiOjE2MjA3OTI0MDAsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ._CpkWJ5S4GaEz3IrcmwoGSPkSL2jyEsVCdUsmdWYED4eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkF0dGlsYUh1biIsInJvbGUiOiJiYXJiIiwiaWF0IjoxNjIwNzkxMjAwLCJleHAiOjE2MjA3OTI0MDAsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ._CpkWJ5S4GaEz3IrcmwoGSPkSL2jyEsVCdUsmdWYED4eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkF0dGlsYUh1biIsInJvbGUiOiJiYXJiIiwiaWF0IjoxNjIwNzkxMjAwLCJleHAiOjE2MjA3OTI0MDAsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ._CpkWJ5S4GaEz3IrcmwoGSPkSL2jyEsVCdUsmdWYED4eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkF0dGlsYUh1biIsInJvbGUiOiJiYXJiIiwiaWF0IjoxNjIwNzkxMjAwLCJleHAiOjE2MjA3OTI0MDAsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ._CpkWJ5S4GaEz3IrcmwoGSPkSL2jyEsVCdUsmdWYED4eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkF0dGlsYUh1biIsInJvbGUiOiJiYXJiIiwiaWF0IjoxNjIwNzkxMjAwLCJleHAiOjE2MjA3OTI0MDAsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ._CpkWJ5S4GaEz3IrcmwoGSPkSL2jyEsVCdUsmdWYED4eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkF0dGlsYUh1biIsInJvbGUiOiJiYXJiIiwiaWF0IjoxNjIwNzkxMjAwLCJleHAiOjE2MjA3OTI0MDAsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ._CpkWJ5S4GaEz3IrcmwoGSPkSL2jyEsVCdUsmdWYED4eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkF0dGlsYUh1biIsInJvbGUiOiJiYXJiIiwiaWF0IjoxNjIwNzkxMjAwLCJleHAiOjE2MjA3OTI0MDAsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ._CpkWJ5S4GaEz3IrcmwoGSPkSL2jyEsVCdUsmdWYED4eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkF0dGlsYUh1biIsInJvbGUiOiJiYXJiIiwiaWF0IjoxNjIwNzkxMjAwLCJleHAiOjE2MjA3OTI0MDAsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ._CpkWJ5S4GaEz3IrcmwoGSPkSL2jyEsVCdUsmdWYED4eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkF0dGlsYUh1biIsInJvbGUiOiJiYXJiIiwiaWF0IjoxNjIwNzkxMjAwLCJleHAiOjE2MjA3OTI0MDAsImlzcyI6IlByaW5jZXRvbiIsInN1YiI6IlNjcmF0Y2hCYWMifQ._CpkWJ5S4GaEz3IrcmwoGSPkSL2jyEsVCdUsmdWYED4
## post a PARENT comment
POST :ipAddress/api/comment/post
:my-headers
{
    "orb_uuid": ":orb",
    "user_id": ":ryan",
    "comment": "anankin i have the high ground",
    "beacon": "COMBEACON"
}
### post comment reply
# Post a child comment
POST :ipAddress/api/comment/reply
:my-headers
{
"orb_uuid":":orb",
    "parent_id": "df59f04b-9183-4561-b5e7-a0d49eb5363b",
    "user_id": ":ryan",
    "comment": "No you anankin you were the chosen one",
    "beacon": "SUBCOMBEACON"
}
### delete comment
# this is a soft delete, so comment will still be available in database.
POST :ipAddress/api/comment/delete
:my-headers
{
    "comment_id": "43dac5db-a38c-4557-8c0d-6e9df27a90ea",
    "parent_id": "43dac5db-a38c-4557-8c0d-6e9df27a90ea",
    "orb_uuid": ":orb"
}

## DEV
### Get user postal code
GET :ipAddress/api/query/user/get_postal?user_id=:prince
:my-headers
### Decode geohash
GET :ipAddress/api/dev/decode_geohash?geohash=null
### Query via PK (DEV)
GET :ipAddress/api/dev/query?pk=ORB%231
### Scan ALL (DEV)
GET :ipAddress/api/dev/scan_all?key=ORB
### Scan all orbs after certain time (DEV)
GET :ipAddress/api/dev/all_orbs?date=2020-12-24&time=00:00:00
### Get comments for particular ORB
GET :ipAddress/api/dev/comment?orb_uuid=1
### 1. Delete orb
DELETE :ipAddress/api/dev/delete_orb?orb_uuid=9cbdc1ce-3a8e-40df-ba8a-b1e76618429a&user_id=1234&expiry_dt=&geohash=
### Delete user
DELETE :ipAddress/api/dev/delete_user?user_id=1234&country_code=65&hp_number=999999999

### Login
POST :ipAddress/api/dev/login
{
    "login": ".v#Z~_0/,>!9oAH66S;t7!+DN07N",
    "user_id": 1234,
    "username": "Joe"
}

# End of ScratchbacV4.7 (local env)
